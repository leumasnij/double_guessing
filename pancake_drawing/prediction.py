
x = [[1.25, 2.3], [1.25, 2.5], [1.25, 3.5],[1.25, 4.3],[1.25, 4.5], [1.25, 5.5], [1.25, 5.7], [1.25, 5.6],[1.25, 7.3],[1.25, 7.2],[1.25, 7.3], [1.25, 8.5], [1.25, 8.3],[1.25, 9.3],[1.25, 9.5],[1.25, 12.2], [1.25, 12.1], [1.25, 14.5],[1.25, 14.1],[1.25, 16.3], [1.25, 16.6], [1.25, 19.2],[1.25, 18.8],[1.25, 21.6], 
     [1.3, 3.5], [1.3,3.5], [1.3, 5.3], [1.3, 5.4], [1.3, 7.5], [1.3, 7.4], [1.3, 10.3], [1.3, 10.4], [1.3, 14.5], [1.3, 14.7], [1.3, 16.6], [1.3, 16.8],[1.3, 20.4], [1.3, 20.3], [1.3, 23.],
     [1.35, 3.75], [1.35,3.9], [1.35, 5.6], [1.35, 5.7], [1.35, 7.5], [1.35, 7.6], [1.35, 10.8], [1.35, 10.9], [1.35, 14.9], [1.35, 15.], [1.35, 16.9], [1.35, 17.1],[1.35, 21.1], [1.35, 20.9],
     [1.4, 3.8], [1.4,4], [1.4, 5.7], [1.4, 6.2], [1.4, 5.9], [1.4, 8.2], [1.4, 8.1], [1.4, 11.4], [1.4, 11.7], [1.4, 15.6], [1.4, 15.7], [1.4, 17.2],[1.4, 17.4], [1.4, 22.6], [1.4, 21.8],
     [1.45, 4.6], [1.45,4.5], [1.45, 5.9], [1.45, 6.1], [1.45, 8.1], [1.45, 8.4], [1.45, 11.4], [1.45, 11.6], [1.45, 15.7], [1.45, 15.9], [1.45, 17.9], [1.45, 18.1],[1.45, 22.6], [1.45, 22.9],
     ]
y = [5,5,10,20,20,30,30,30,60, 60,60,90,90,120,120,180,180,240,240,360,360,480,480,600,
     10,10,30,30,60,60,120,120,240,240,360,360,480,480,600,
     10,10,30,30,60,60,120,120,240,240,360,360,480,480,
     10,10,30,30,30,60,60,120,120,240,240,360,360,480,480,
     10,10,30,30,60,60,120,120,240,240,360,360,480,480]


x2 = [[1.25, 0.8], [1.25, 1.2], [1.25, 1.3],[1.25, 1.8],[1.25, 1.9], [1.25, 2.6], [1.25,2.8], [1.25, 3.4],[1.25, 3.55],[1.25, 4.3],[1.25, 4.6], 
     [1.3, 0.74], [1.3,0.76], [1.3, 1.3], [1.3, 1.2], [1.3, 1.8], [1.3, 2.1], [1.3, 3.7], [1.3, 3.9], [1.3, 4.4], [1.3, 4.5], [1.3, 5.9],
     [1.35, 0.81], [1.35,0.79], [1.35, 1.1], [1.35, 1.12], [1.35, 1.8], [1.35, 1.74], [1.35, 2.8], [1.35, 2.7], [1.35, 4.2], [1.35, 4.1], [1.35, 4.9], [1.35, 4.7],
     [1.4, 0.8], [1.4,0.9], [1.4, 1.7], [1.4, 1.6], [1.4, 3.1], [1.4, 3.2], [1.4,4.1], [1.4, 4.4], 
     [1.45, 0.75], [1.45,0.76], [1.45, 0.93], [1.45, 0.87], [1.45, 1.7], [1.45, 1.7], [1.45, 3.1], [1.45, 3.2], [1.45, 4.7], [1.45, 4.5]
     ]
y2 = [0.05,0.1,0.1,0.2,0.2,0.3,0.3,0.4,0.4, 0.5,0.5,
     0.05,0.05, 0.1,0.1,0.2,0.2,0.3,0.3,0.4,0.4, 0.5,
     0.05,0.05, 0.1,0.1,0.2,0.2,0.3,0.3,0.4,0.4, 0.5,0.5,
     0.1,0.1,0.2,0.2,0.3,0.3,0.4,0.4, 
     0.05, 0.05,0.1,0.1,0.2,0.2,0.3,0.3,0.4,0.4]

print(len(x2), len(y2))
import torch

X_tensor = torch.FloatTensor(x2)
y_tensor = torch.FloatTensor(y2).view(-1, 1)


import torch.nn as nn
import torch.nn.functional as F
torch.manual_seed(42)
class SimpleNet(nn.Module):
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.fc1 = nn.Linear(2, 32)  # Input layer with 2 inputs
        self.fc2 = nn.Linear(32, 64)  # Hidden layer
        self.fc3 = nn.Linear(64, 1)  # Output layer with 1 output

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        return self.fc3(x)

model = SimpleNet()
optimizer = torch.optim.Adam(model.parameters(), lr=0.000666)
loss_fn = nn.MSELoss()
for epoch in range(1000):  # Number of epochs
    optimizer.zero_grad()   # Clear gradients for the next train
    output = model(X_tensor)  # Forward pass: Compute predicted y by passing x to the model
    loss = loss_fn(output, y_tensor)  # Compute loss
    loss.backward()  # Backward pass: compute gradient of the loss with respect to model parameters
    optimizer.step()  # Update model parameters

    if epoch % 100 == 0:
        print(loss.item())

torch.save(model.state_dict(), 'stroke_width.pth')
new_X = torch.FloatTensor([[1.45, 4]])
predicted_y = model(new_X)
print("Predicted Output:", predicted_y.item())